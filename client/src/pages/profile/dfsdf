import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { 
  FaEye, 
  FaEyeSlash, 
  FaCopy, 
  FaFacebookF, 
  FaTwitter, 
  FaTelegramPlane, 
  FaWhatsapp,
  FaHistory,
  FaMoneyBillWave,
  FaGift,
  FaUserFriends,
  FaShieldAlt,
  FaKey,
  FaUser,
  FaArrowLeft,
  FaChevronRight,
  FaCheckCircle,
  FaTimesCircle,
  FaClock,
  FaShareAlt,
  FaBangladeshiTakaSign
} from 'react-icons/fa';
import { MdArrowBackIosNew } from "react-icons/md";
import { NavLink, useNavigate } from 'react-router-dom';

const Profile = ({ onBack }) => {
  // State for password visibility
  const [showLoginPassword, setShowLoginPassword] = useState(false);
  const [showTransactionPassword, setShowTransactionPassword] = useState(false);
  const navigate = useNavigate();
  
  // State for password forms
  const [currentLoginPassword, setCurrentLoginPassword] = useState('');
  const [newLoginPassword, setNewLoginPassword] = useState('');
  const [confirmLoginPassword, setConfirmLoginPassword] = useState('');
  const [currentTransactionPassword, setCurrentTransactionPassword] = useState('');
  const [newTransactionPassword, setNewTransactionPassword] = useState('');
  const [confirmTransactionPassword, setConfirmTransactionPassword] = useState('');
  
  // State for mobile number form
  const [mobileNumber, setMobileNumber] = useState('');
  const [mobileTransactionPassword, setMobileTransactionPassword] = useState('');
  const [confirmMobileTransactionPassword, setConfirmMobileTransactionPassword] = useState('');

  // State for editable username
  const [editableUsername, setEditableUsername] = useState('');
  const [isEditingUsername, setIsEditingUsername] = useState(false);

  // User data and loading states
  const [userData, setUserData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const base_url = import.meta.env.VITE_API_KEY_Base_URL;

  // State for feedback messages
  const [feedback, setFeedback] = useState({
    type: '', // 'success' or 'error'
    message: '',
    field: '' // Which form the message belongs to
  });

  // State for showing mobile number alert
  const [showMobileAlert, setShowMobileAlert] = useState(false);
  const [alertContext, setAlertContext] = useState(''); // 'deposit' or 'withdraw'

  // State for history data
  const [depositHistory, setDepositHistory] = useState([]);
  const [withdrawalHistory, setWithdrawalHistory] = useState([]);
  const [betHistory, setBetHistory] = useState([]);
  const [referralHistory, setReferralHistory] = useState([]);

  // Tab management
  const tabs = [
    { name: 'ব্যক্তিগত তথ্য', icon: <FaUser className="text-lg" /> },
    { name: 'নিরাপত্তা', icon: <FaShieldAlt className="text-lg" /> },
    { name: 'পাসওয়ার্ড', icon: <FaKey className="text-lg" /> },
    { name: 'ইতিহাস', icon: <FaHistory className="text-lg" /> }
  ];
  
  const [selectedTab, setSelectedTab] = useState(tabs[0].name);

  // Format date to Bengali
  const formatDateToBengali = (dateString) => {
    if (!dateString) return 'তারিখ পাওয়া যায়নি';
    
    const date = new Date(dateString);
    const options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' };
    const formattedDate = date.toLocaleDateString('bn-BD', options);
    
    // Convert English digits to Bengali
    return formattedDate.replace(/\d/g, d => '০১২৩৪৫৬৭৮৯'[d]);
  };

  // Format mobile number to show first 4 and last 3 digits (in English numbers)
  const formatMobileNumber = (number) => {
    if (!number || number.length < 7) return number;
    const firstPart = number.substring(0, 4);
    const lastPart = number.substring(number.length - 3);
    return `${firstPart}****${lastPart}`;
  };

  // Format balance with Bengali digits and commas
  const formatBalance = (amount) => {
    if (amount === undefined || amount === null) return '০.০০';
    const formatted = new Intl.NumberFormat('en-US').format(amount.toFixed(2));
    return formatted.replace(/\d/g, d => '০১২৩৪৫৬৭৮৯'[d]);
  };

  // Show mobile number alert when trying to deposit/withdraw
  const checkMobileBeforeAction = (actionType) => {
    if (!userData?.phone) {
      setShowMobileAlert(true);
      setAlertContext(actionType);
      return false;
    }
    return true;
  };

  // Fetch user data
  const fetchUserData = async () => {
    try {
      setLoading(true);
      const response = await axios.get(`${base_url}/user/profile`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      setUserData(response.data);
      setEditableUsername(response.data.username);
      setLoading(false);
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to fetch user data');
      setLoading(false);
    }
  };

  // Initialize user data
  useEffect(() => {
    fetchUserData();
  }, []);

  // Handle adding mobile number
  const handleAddMobile = async (e) => {
    if (e) e.preventDefault();
    
    // Validation
    if (!/^[0-9]{10,15}$/.test(mobileNumber)) {
      setFeedback({
        type: 'error',
        message: 'অবৈধ মোবাইল নম্বর ফরম্যাট (১০-১৫ ডিজিট প্রয়োজন)',
        field: 'mobile'
      });
      return;
    }

    if (mobileTransactionPassword !== confirmMobileTransactionPassword) {
      setFeedback({
        type: 'error',
        message: 'লেনদেন পাসওয়ার্ড এবং নিশ্চিতকরণ মেলে না',
        field: 'mobile'
      });
      return;
    }

    try {
      const response = await axios.post(`${base_url}/user/add-mobile`, {
        userId: userData._id,
        mobileNumber,
        transactionPassword: mobileTransactionPassword
      }, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });

      setFeedback({
        type: 'success',
        message: 'মোবাইল নম্বর এবং লেনদেন পাসওয়ার্ড সফলভাবে যোগ করা হয়েছে!',
        field: 'mobile'
      });

      // Reset form
      setMobileNumber('');
      setMobileTransactionPassword('');
      setConfirmMobileTransactionPassword('');

      // Close alert if it was open
      setShowMobileAlert(false);

      // Refresh user data
      fetchUserData();

    } catch (err) {
      console.log(err)
      setFeedback({
        type: 'error',
        message: err.response?.data?.message || 'মোবাইল নম্বর যোগ করতে ব্যর্থ হয়েছে',
        field: 'mobile'
      });
    }
  };

  // Handle login password change
  const handleLoginPasswordChange = async (e) => {
    e.preventDefault();
    
    // Validation
    if (newLoginPassword !== confirmLoginPassword) {
      setFeedback({
        type: 'error',
        message: 'নতুন পাসওয়ার্ড এবং নিশ্চিতকরণ মেলে না',
        field: 'loginPassword'
      });
      return;
    }

    try {
      const response = await axios.put(`${base_url}/user/update-account-password`, {
        userId: userData._id,
        currentPassword: currentLoginPassword,
        newPassword: newLoginPassword
      }, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });

      setFeedback({
        type: 'success',
        message: 'লগইন পাসওয়ার্ড সফলভাবে পরিবর্তন করা হয়েছে!',
        field: 'loginPassword'
      });

      // Reset form
      setCurrentLoginPassword('');
      setNewLoginPassword('');
      setConfirmLoginPassword('');

      // Refresh user data
      fetchUserData();

    } catch (err) {
      setFeedback({
        type: 'error',
        message: err.response?.data?.message || 'পাসওয়ার্ড পরিবর্তন করতে ব্যর্থ হয়েছে',
        field: 'loginPassword'
      });
    }
  };

  // Handle transaction password change
  const handleTransactionPasswordChange = async (e) => {
    e.preventDefault();
    
    // Validation
    if (newTransactionPassword !== confirmTransactionPassword) {
      setFeedback({
        type: 'error',
        message: 'নতুন লেনদেন পাসওয়ার্ড এবং নিশ্চিতকরণ মেলে না',
        field: 'transactionPassword'
      });
      return;
    }

    try {
      const response = await axios.put(`${base_url}/user/update-transaction-password`, {
        userId: userData._id,
        currentPassword: currentTransactionPassword,
        newPassword: newTransactionPassword
      }, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });

      setFeedback({
        type: 'success',
        message: 'লেনদেন পাসওয়ার্ড সফলভাবে পরিবর্তন করা হয়েছে!',
        field: 'transactionPassword'
      });

      // Reset form
      setCurrentTransactionPassword('');
      setNewTransactionPassword('');
      setConfirmTransactionPassword('');

      // Refresh user data
      fetchUserData();

    } catch (err) {
      setFeedback({
        type: 'error',
        message: err.response?.data?.message || 'লেনদেন পাসওয়ার্ড পরিবর্তন করতে ব্যর্থ হয়েছে',
        field: 'transactionPassword'
      });
    }
  };

  // Handle username update
  const handleUsernameUpdate = async () => {
    try {
      const response = await axios.put(
        `${base_url}/user/update-username`,
        {
          userId: userData._id,
          newUsername: editableUsername,
          password: currentLoginPassword
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );

      setFeedback({
        type: 'success',
        message: 'ব্যবহারকারীর নাম সফলভাবে আপডেট করা হয়েছে!',
        field: 'personalInfo'
      });

      setIsEditingUsername(false);
      // Clear password field after successful update
      setCurrentLoginPassword('');
      fetchUserData();

    } catch (err) {
      setFeedback({
        type: 'error',
        message: err.response?.data?.message || 'ব্যবহারকারীর নাম আপডেট করতে ব্যর্থ হয়েছে',
        field: 'personalInfo'
      });
    }
  };

  // Get profile image based on username
  const getProfileImage = (username) => {
    // This is a placeholder - replace with your actual image logic
    return `https://images.5943920202.com//TCG_PROD_IMAGES/B2C/01_PROFILE/PROFILE/0.png`;
  };

  // Status badge component
  const StatusBadge = ({ status }) => {
    switch (status) {
      case 'completed':
      case 'active':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-900 text-green-300">
            <FaCheckCircle className="mr-1" /> সম্পূর্ণ
          </span>
        );
      case 'pending':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-900 text-yellow-300">
            <FaClock className="mr-1" /> মুলতুবি
          </span>
        );
      case 'rejected':
      case 'inactive':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-900 text-red-300">
            <FaTimesCircle className="mr-1" /> বাতিল
          </span>
        );
      default:
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-700 text-gray-300">
            অজানা
          </span>
        );
    }
  };

  if (loading) return (
    <div className="bg-gray-900 min-h-screen flex items-center justify-center">
      <div className="text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cyan-500 mx-auto"></div>
        <p className="mt-4 text-gray-300">লোড হচ্ছে...</p>
      </div>
    </div>
  );
  
  if (error) return (
    <div className="bg-gray-900 min-h-screen flex items-center justify-center">
      <div className="max-w-md p-6 bg-gray-800 rounded-xl border border-gray-700 shadow-lg">
        <div className="text-red-500 text-lg font-medium mb-4">ত্রুটি: {error}</div>
        <button 
          onClick={() => setError(null)}
          className="w-full bg-cyan-600 hover:bg-cyan-500 text-white py-2 px-4 rounded-lg transition-colors"
        >
          পুনরায় চেষ্টা করুন
        </button>
      </div>
    </div>
  );

  return (
    <div className="bg-gray-900 text-gray-100 min-h-screen font-anek">
      {/* Header */}
      <div className="bg-gray-800 p-4 flex items-center border-b border-gray-700 sticky top-0 z-[1000] shadow-md">
        <button 
          onClick={() => navigate("/")}
          className="p-2 rounded-full hover:bg-gray-700 transition-colors"
        >
          <MdArrowBackIosNew className="text-lg text-cyan-400" />
        </button>
        <h1 className="text-[18px] font-[600] ml-4 text-white">প্রোফাইল</h1>
      </div>

      {/* Mobile Number Alert Modal */}
      {showMobileAlert && (
        <div className="fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-50 p-4">
          <div className="bg-gray-800 p-6 rounded-xl max-w-md w-full border border-cyan-600 shadow-xl">
            <h3 className="text-xl font-bold text-cyan-400 mb-4 flex items-center">
              <FaShieldAlt className="mr-2" />
              মোবাইল নম্বর প্রয়োজন
            </h3>
            <p className="mb-4 text-gray-300">
              {alertContext === 'deposit' 
                ? 'ডিপোজিট করতে আপনার মোবাইল নম্বর যাচাইকরণ প্রয়োজন' 
                : 'উইথড্র করতে আপনার মোবাইল নম্বর যাচাইকরণ প্রয়োজন'}
            </p>
            
            <form onSubmit={handleAddMobile}>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-400 mb-2">মোবাইল নম্বর</label>
                <input
                  type="text"
                  className="w-full p-3 border border-gray-700 rounded-lg bg-gray-700 text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-all"
                  value={mobileNumber}
                  onChange={(e) => setMobileNumber(e.target.value.replace(/\D/g, ''))}
                  placeholder="01688XXXXXXXX"
                  maxLength={15}
                  required
                />
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-400 mb-2">লেনদেন পাসওয়ার্ড</label>
                <div className="relative">
                  <input
                    type={showTransactionPassword ? "text" : "password"}
                    className="w-full p-3 border border-gray-700 rounded-lg bg-gray-700 text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-all"
                    value={mobileTransactionPassword}
                    onChange={(e) => setMobileTransactionPassword(e.target.value)}
                    required
                    minLength={6}
                    placeholder="অন্তত ৬ অক্ষর"
                  />
                  <button
                    type="button"
                    className="absolute right-3 top-3 text-gray-400 hover:text-cyan-400 transition-colors"
                    onClick={() => setShowTransactionPassword(!showTransactionPassword)}
                  >
                    {showTransactionPassword ? <FaEyeSlash /> : <FaEye />}
                  </button>
                </div>
              </div>
              
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-400 mb-2">পাসওয়ার্ড নিশ্চিত করুন</label>
                <div className="relative">
                  <input
                    type={showTransactionPassword ? "text" : "password"}
                    className="w-full p-3 border border-gray-700 rounded-lg bg-gray-700 text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-all"
                    value={confirmMobileTransactionPassword}
                    onChange={(e) => setConfirmMobileTransactionPassword(e.target.value)}
                    required
                    minLength={6}
                    placeholder="পাসওয়ার্ড নিশ্চিত করুন"
                  />
                  <button
                    type="button"
                    className="absolute right-3 top-3 text-gray-400 hover:text-cyan-400 transition-colors"
                    onClick={() => setShowTransactionPassword(!showTransactionPassword)}
                  >
                    {showTransactionPassword ? <FaEyeSlash /> : <FaEye />}
                  </button>
                </div>
              </div>
              
              <div className="flex justify-end gap-3">
                <button
                  type="button"
                  onClick={() => setShowMobileAlert(false)}
                  className="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                >
                  বাতিল
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 bg-cyan-600 hover:bg-cyan-500 text-white rounded-lg transition-colors flex items-center"
                >
                  সংরক্ষণ করুন
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Feedback messages */}
      {feedback.message && (
        <div className={`mx-4 mt-4 p-3 rounded-lg border ${
          feedback.type === 'success' 
            ? 'bg-green-900/50 border-green-700 text-green-100' 
            : 'bg-red-900/50 border-red-700 text-red-100'
        }`}>
          <div className="flex items-center justify-between">
            <span>{feedback.message}</span>
            <button 
              onClick={() => setFeedback({ type: '', message: '', field: '' })}
              className="ml-2 text-lg hover:text-white transition-colors"
            >
              &times;
            </button>
          </div>
        </div>
      )}

      <div className="p-4">
        {/* Profile Summary */}
        <div className="bg-gradient-to-br from-gray-800 to-gray-900 p-5 rounded-xl shadow-lg border border-gray-700 mb-6 relative overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-r from-cyan-900/20 to-purple-900/20"></div>
          <div className="relative z-10">
            <div className="flex items-center gap-4 mb-4">
              <div className="relative">
                <img
                  src={getProfileImage(userData?.username)}
                  alt="User"
                  className="w-16 h-16 rounded-full border-2 border-cyan-400 object-cover shadow-md"
                />
                <div className="absolute -bottom-1 -right-1 bg-cyan-500 rounded-full p-1">
                  <div className="bg-white rounded-full p-1">
                    <FaCheckCircle className="text-cyan-500 text-xs" />
                  </div>
                </div>
              </div>
              <div className="flex-1">
                <p className="text-lg font-semibold text-white">{userData?.username || 'N/A'}</p>
                <p className="text-xs text-gray-400">
                  সদস্য পদ: {formatDateToBengali(userData?.createdAt) || 'N/A'}
                </p>
              </div>
            </div>
            <div className="text-center mb-4">
              <p className="text-sm text-gray-400 mb-1">মোট ব্যালেন্স</p>
              <p className="text-3xl font-bold text-cyan-400">
                ৳ {formatBalance(userData?.balance)}
              </p>
            </div>
            <div className="flex justify-between text-sm">
              <div className="text-center">
                <p className="text-gray-400">বোনাস</p>
                <p className="text-cyan-300 font-medium">৳{formatBalance(userData?.bonusBalance)}</p>
              </div>
              <div className="text-center">
                <p className="text-gray-400">রেফারেল</p>
                <p className="text-cyan-300 font-medium">৳{formatBalance(userData?.referralEarnings)}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="grid grid-cols-2 gap-3 mb-6">
          <NavLink 
            to="/deposit"
            className="bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white py-3 px-2 rounded-[5px] text-sm font-medium shadow-md transition-all transform hover:scale-[1.02] flex items-center justify-center gap-2"
          >
            <FaMoneyBillWave /> ডিপোজিট
          </NavLink>
          <NavLink 
            to="/withdraw"
            className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white py-3 px-2 rounded-[5px] cursor-pointer text-sm font-medium shadow-md transition-all transform hover:scale-[1.02] flex items-center justify-center gap-2"
          >
            <FaMoneyBillWave /> উত্তোলন
          </NavLink>
          <NavLink 
            to="/transfer"
            className="bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 text-white py-3 px-2 cursor-pointer rounded-[5px] text-sm font-medium shadow-md transition-all transform hover:scale-[1.02] flex items-center justify-center gap-2"
          >
            <FaMoneyBillWave /> ট্রান্সফার
          </NavLink>
          <button 
            onClick={() => setSelectedTab('ইতিহাস')}
            className="bg-gradient-to-r from-amber-600 to-amber-700 hover:from-amber-700 hover:to-amber-800 text-white py-3 cursor-pointer px-2 rounded-[5px] text-sm font-medium shadow-md transition-all transform hover:scale-[1.02] flex items-center justify-center gap-2"
          >
            <FaHistory /> বেটিং ইতিহাস
          </button>
        </div>

        {/* Tab Navigation */}
        <div className="flex overflow-x-auto pb-3 mb-6 hide-scrollbar">
          {tabs.map((tab) => (
            <button
              key={tab.name}
              onClick={() => setSelectedTab(tab.name)}
              className={`px-4 py-2 mr-2 rounded-full flex items-center whitespace-nowrap transition-all ${
                selectedTab === tab.name
                  ? 'bg-gradient-to-r from-cyan-600 to-cyan-700 text-white shadow-md'
                  : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
              }`}
            >
              <span className="mr-2">{tab.icon}</span>
              {tab.name}
            </button>
          ))}
        </div>

        {/* Tab Content */}
        <div className="bg-gray-800 rounded-xl p-4 border border-gray-700 shadow-md">
          {selectedTab === 'ব্যক্তিগত তথ্য' && (
            <div>
              <h3 className="text-lg font-semibold mb-4 text-cyan-400">ব্যক্তিগত তথ্য</h3>
              
              {/* Balance Cards */}
              <div className="grid grid-cols-2 gap-3 mb-6">
                {/* Main Balance */}
                <div className="bg-gradient-to-br from-blue-900 to-blue-800 p-4 rounded-lg border border-blue-700 shadow">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-blue-200">মেইন ব্যালেন্স</p>
                      <p className="text-xl font-bold">{formatBalance(userData?.balance)} ৳</p>
                    </div>
                    <div className="bg-blue-700 bg-opacity-30 p-2 rounded-full">
                      <FaBangladeshiTakaSign/>
                    </div>
                  </div>
                </div>

                {/* Bonus Balance */}
                <div className="bg-gradient-to-br from-purple-900 to-purple-800 p-4 rounded-lg border border-purple-700 shadow">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-purple-200">বোনাস ব্যালেন্স</p>
                      <p className="text-xl font-bold">{formatBalance(userData?.bonusBalance)} ৳</p>
                    </div>
                    <div className="bg-purple-700 bg-opacity-30 p-2 rounded-full">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-purple-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11.933 12.8a1 1 0 000-1.6L6.6 7.2A1 1 0 005 8v8a1 1 0 001.6.8l5.333-4zM19.933 12.8a1 1 0 000-1.6l-5.333-4A1 1 0 0013 8v8a1 1 0 001.6.8l5.333-4z" />
                      </svg>
                    </div>
                  </div>
                </div>

                {/* Referral Balance */}
                <div className="bg-gradient-to-br from-green-900 to-green-800 p-4 rounded-lg border border-green-700 shadow">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-green-200">রেফারেল ব্যালেন্স</p>
                      <p className="text-xl font-bold">{formatBalance(userData?.referralEarnings)} ৳</p>
                    </div>
                    <div className="bg-green-700 bg-opacity-30 p-2 rounded-full">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                      </svg>
                    </div>
                  </div>
                </div>

                {/* Wager Remaining */}
                <div className="bg-gradient-to-br from-amber-900 to-amber-800 p-4 rounded-lg border border-amber-700 shadow">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-amber-200">ওয়েজার বাকি</p>
                      <p className="text-xl font-bold">{formatBalance(userData?.wager_remaining || 0)} ৳</p>
                    </div>
                    <div className="bg-amber-700 bg-opacity-30 p-2 rounded-full">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-amber-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-gray-700 bg-opacity-50 p-4 rounded-lg shadow mb-6 border border-gray-600">
                {feedback.field === 'personalInfo' && (
                  <div className={`mb-3 p-3 rounded text-sm ${
                    feedback.type === 'success' ? 'bg-green-900 text-green-100' : 'bg-red-900 text-red-100'
                  }`}>
                    {feedback.message}
                  </div>
                )}
                
                <div className="space-y-4">
                  {/* Player ID (non-editable) */}
                  <div>
                    <label className="block text-sm text-gray-400 mb-1">প্লেয়ার আইডি</label>
                    <input
                      type="text"
                      className="w-full p-2 border border-gray-600 rounded bg-gray-800 text-white text-sm cursor-not-allowed"
                      value={userData?.player_id || 'N/A'}
                      readOnly
                    />
                  </div>
                  
                  {/* Email (non-editable) */}
                  <div>
                    <label className="block text-sm text-gray-400 mb-1">ইমেইল</label>
                    <input
                      type="text"
                      className="w-full p-2 border border-gray-600 rounded bg-gray-800 text-white text-sm cursor-not-allowed"
                      value={userData?.email || 'N/A'}
                      readOnly
                    />
                  </div>
                  
                  {/* Username (editable) */}
                  <div>
                    <label className="block text-sm text-gray-400 mb-1">ব্যবহারকারীর নাম</label>
                    <div className="flex gap-2">
                      <input
                        type="text"
                        className={`flex-1 p-2 border rounded text-sm ${
                          isEditingUsername 
                            ? 'border-cyan-400 bg-gray-800 text-white' 
                            : 'border-gray-600 bg-gray-800 text-white cursor-not-allowed'
                        }`}
                        value={editableUsername}
                        onChange={(e) => setEditableUsername(e.target.value)}
                        readOnly={!isEditingUsername}
                      />
                      {isEditingUsername ? (
                        <>
                          <button
                            onClick={handleUsernameUpdate}
                            className="bg-green-500 hover:bg-green-600 cursor-pointer text-white px-3 py-1 rounded text-sm"
                          >
                            সংরক্ষণ
                          </button>
                          <button
                            onClick={() => {
                              setIsEditingUsername(false);
                              setEditableUsername(userData?.username || '');
                              setCurrentLoginPassword('');
                            }}
                            className="bg-red-500 hover:bg-red-600 cursor-pointer text-white px-3 py-1 rounded text-sm"
                          >
                            বাতিল
                          </button>
                        </>
                      ) : (
                        <button
                          onClick={() => setIsEditingUsername(true)}
                          className="bg-cyan-500 hover:bg-cyan-600 cursor-pointer text-white px-3 py-1 rounded text-sm"
                        >
                          সম্পাদনা
                        </button>
                      )}
                    </div>
                  </div>

                  {/* Password verification when editing username */}
                  {isEditingUsername && (
                    <div className="mt-2">
                      <label className="block text-sm text-gray-400 mb-1">বর্তমান পাসওয়ার্ড</label>
                      <div className="relative">
                        <input
                          type={showLoginPassword ? "text" : "password"}
                          className="w-full p-2 border border-gray-600 rounded bg-gray-800 text-white text-sm"
                          value={currentLoginPassword}
                          onChange={(e) => setCurrentLoginPassword(e.target.value)}
                          placeholder="পাসওয়ার্ড দিন"
                          required
                        />
                        <button
                          type="button"
                          className="absolute right-2 top-2 text-gray-500 hover:text-gray-300"
                          onClick={() => setShowLoginPassword(!showLoginPassword)}
                        >
                          {showLoginPassword ? <FaEyeSlash /> : <FaEye />}
                        </button>
                      </div>
                      <p className="text-xs text-gray-500 mt-1">ব্যবহারকারীর নাম পরিবর্তন করতে আপনার বর্তমান পাসওয়ার্ড প্রয়োজন</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {selectedTab === 'নিরাপত্তা' && (
            <div>
              <h3 className="text-lg font-semibold mb-4 text-cyan-400">অ্যাকাউন্ট নিরাপত্তা</h3>
              
              {/* Mobile Number Section */}
              <div className="bg-gray-700 bg-opacity-50 p-4 rounded-lg shadow mb-6 border border-gray-600">
                <h4 className="font-medium mb-4 text-cyan-400 flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                  </svg>
                  মোবাইল নম্বর
                </h4>
                {userData?.phone ? (
                  <div className="flex items-center justify-between bg-gray-800 p-3 rounded">
                    <div>
                      <p className="text-sm text-gray-400">আপনার মোবাইল নম্বর</p>
                      <p className="text-white font-medium">{formatMobileNumber(userData.phone)}</p>
                    </div>
                    <span className="bg-green-50 bg-opacity-20 text-green-600 text-xs px-2 py-1 rounded-full flex items-center gap-1">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      যাচাইকৃত
                    </span>
                  </div>
                ) : (
                  <>
                    {feedback.field === 'mobile' && (
                      <div className={`mb-3 p-3 rounded text-sm ${
                        feedback.type === 'success' ? 'bg-green-900 text-green-100' : 'bg-red-900 text-red-100'
                      }`}>
                        {feedback.message}
                      </div>
                    )}
                    <div className="bg-yellow-500 bg-opacity-10 border text-gray-700 border-yellow-500 border-opacity-30 p-3 rounded mb-4">
                      <p className="text-sm  flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                        </svg>
                        লেনদেনের জন্য আপনাকে আপনার মোবাইল নম্বর যোগ করতে হবে
                      </p>
                    </div>
                    <form onSubmit={handleAddMobile}>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                        <div>
                          <label className="block text-sm text-gray-400 mb-1">মোবাইল নম্বর</label>
                          <div className="relative">
                            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                              <span className="text-gray-500">+88</span>
                            </div>
                            <input
                              type="text"
                              className="w-full pl-12 p-2 border border-gray-600 rounded bg-gray-800 text-white text-sm"
                              value={mobileNumber}
                              onChange={(e) => setMobileNumber(e.target.value.replace(/\D/g, ''))}
                              placeholder="01688XXXXXXXX"
                              maxLength={11}
                              required
                            />
                          </div>
                        </div>
                        <div>
                          <label className="block text-sm text-gray-400 mb-1">লেনদেন পাসওয়ার্ড</label>
                          <div className="relative">
                            <input
                              type={showTransactionPassword ? "text" : "password"}
                              className="w-full p-2 border border-gray-600 rounded bg-gray-800 text-white text-sm"
                              value={mobileTransactionPassword}
                              onChange={(e) => setMobileTransactionPassword(e.target.value)}
                              required
                              minLength={6}
                              placeholder="6+ characters"
                            />
                            <button
                              type="button"
                              className="absolute right-2 top-2 text-gray-500 hover:text-gray-300"
                              onClick={() => setShowTransactionPassword(!showTransactionPassword)}
                            >
                              {showTransactionPassword ? <FaEyeSlash /> : <FaEye />}
                            </button>
                          </div>
                        </div>
                        <div>
                          <label className="block text-sm text-gray-400 mb-1">পাসওয়ার্ড নিশ্চিত করুন</label>
                          <div className="relative">
                            <input
                              type={showTransactionPassword ? "text" : "password"}
                              className="w-full p-2 border border-gray-600 rounded bg-gray-800 text-white text-sm"
                              value={confirmMobileTransactionPassword}
                              onChange={(e) => setConfirmMobileTransactionPassword(e.target.value)}
                              required
                              minLength={6}
                              placeholder="Confirm password"
                            />
                            <button
                              type="button"
                              className="absolute right-2 top-2 text-gray-500 hover:text-gray-300"
                              onClick={() => setShowTransactionPassword(!showTransactionPassword)}
                            >
                              {showTransactionPassword ? <FaEyeSlash /> : <FaEye />}
                            </button>
                          </div>
                        </div>
                      </div>
                      <div className="flex justify-end">
                        <button
                          type="submit"
                          className="bg-cyan-500 hover:bg-cyan-600 text-gray-900 px-4 py-2 rounded text-sm font-medium flex items-center gap-2"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                          </svg>
                          মোবাইল নম্বর সংরক্ষণ করুন
                        </button>
                      </div>
                    </form>
                  </>
                )}
              </div>
            </div>
          )}

          {selectedTab === 'পাসওয়ার্ড' && (
            <div>
              <h3 className="text-lg font-semibold mb-4 text-cyan-400">পাসওয়ার্ড আপডেট করুন</h3>
              
              {/* Login Password Change */}
              <div className="bg-gray-700 bg-opacity-50 p-4 rounded-lg shadow mb-6 border border-gray-600">
                <h4 className="font-medium mb-4 text-cyan-400 flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                  </svg>
                  লগইন পাসওয়ার্ড পরিবর্তন করুন
                </h4>
                {feedback.field === 'loginPassword' && (
                  <div className={`mb-3 p-3 rounded text-sm ${
                    feedback.type === 'success' ? 'bg-green-900 text-green-100' : 'bg-red-900 text-red-100'
                  }`}>
                    {feedback.message}
                  </div>
                )}
                <form onSubmit={handleLoginPasswordChange}>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                    <div>
                      <label className="block text-sm text-gray-400 mb-1">বর্তমান পাসওয়ার্ড</label>
                      <div className="relative">
                        <input
                          type={showLoginPassword ? "text" : "password"}
                          className="w-full p-2 border border-gray-600 rounded bg-gray-800 text-white text-sm"
                          value={currentLoginPassword}
                          onChange={(e) => setCurrentLoginPassword(e.target.value)}
                          required
                          placeholder="Current password"
                        />
                        <button
                          type="button"
                          className="absolute right-2 top-2 text-gray-500 hover:text-gray-300"
                          onClick={() => setShowLoginPassword(!showLoginPassword)}
                        >
                          {showLoginPassword ? <FaEyeSlash /> : <FaEye />}
                        </button>
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm text-gray-400 mb-1">নতুন পাসওয়ার্ড</label>
                      <div className="relative">
                        <input
                          type={showLoginPassword ? "text" : "password"}
                          className="w-full p-2 border border-gray-600 rounded bg-gray-800 text-white text-sm"
                          value={newLoginPassword}
                          onChange={(e) => setNewLoginPassword(e.target.value)}
                          required
                          minLength={6}
                          placeholder="6+ characters"
                        />
                        <button
                          type="button"
                          className="absolute right-2 top-2 text-gray-500 hover:text-gray-300"
                          onClick={() => setShowLoginPassword(!showLoginPassword)}
                        >
                          {showLoginPassword ? <FaEyeSlash /> : <FaEye />}
                        </button>
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm text-gray-400 mb-1">পাসওয়ার্ড নিশ্চিত করুন</label>
                      <div className="relative">
                        <input
                          type={showLoginPassword ? "text" : "password"}
                          className="w-full p-2 border border-gray-600 rounded bg-gray-800 text-white text-sm"
                          value={confirmLoginPassword}
                          onChange={(e) => setConfirmLoginPassword(e.target.value)}
                          required
                          minLength={6}
                          placeholder="Confirm password"
                        />
                        <button
                          type="button"
                          className="absolute right-2 top-2 text-gray-500 hover:text-gray-300"
                          onClick={() => setShowLoginPassword(!showLoginPassword)}
                        >
                          {showLoginPassword ? <FaEyeSlash /> : <FaEye />}
                        </button>
                      </div>
                    </div>
                  </div>
                  <div className="flex justify-end">
                    <button
                      type="submit"
                      className="bg-cyan-500 hover:bg-cyan-600 text-gray-900 px-4 py-2 rounded text-sm font-medium flex items-center gap-2"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      পাসওয়ার্ড পরিবর্তন করুন
                    </button>
                  </div>
                </form>
              </div>

              {/* Transaction Password Change */}
              {userData?.phone && (
                <div className="bg-gray-700 bg-opacity-50 p-4 rounded-lg shadow border border-gray-600">
                  <h4 className="font-medium mb-4 text-cyan-400 flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 11c0 3.517-1.009 6.799-2.753 9.571m-3.44-2.04l.054-.09A13.916 13.916 0 008 11a4 4 0 118 0c0 1.017-.07 2.019-.203 3m-2.118 6.844A21.88 21.88 0 0015.171 17m3.839 1.132c.645-2.266.99-4.659.99-7.132A8 8 0 008 4.07M3 15.364c.64-1.319 1-2.8 1-4.364 0-1.457.39-2.823 1.07-4" />
                    </svg>
                    লেনদেন পাসওয়ার্ড পরিবর্তন করুন
                  </h4>
                  {feedback.field === 'transactionPassword' && (
                    <div className={`mb-3 p-3 rounded text-sm ${
                      feedback.type === 'success' ? 'bg-green-900 text-green-100' : 'bg-red-900 text-red-100'
                    }`}>
                      {feedback.message}
                    </div>
                  )}
                  <form onSubmit={handleTransactionPasswordChange}>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                      <div>
                        <label className="block text-sm text-gray-400 mb-1">বর্তমান লেনদেন পাসওয়ার্ড</label>
                        <div className="relative">
                          <input
                            type={showTransactionPassword ? "text" : "password"}
                            className="w-full p-2 border border-gray-600 rounded bg-gray-800 text-white text-sm"
                            value={currentTransactionPassword}
                            onChange={(e) => setCurrentTransactionPassword(e.target.value)}
                            required
                            placeholder="Current password"
                          />
                          <button
                            type="button"
                            className="absolute right-2 top-2 text-gray-500 hover:text-gray-300"
                            onClick={() => setShowTransactionPassword(!showTransactionPassword)}
                          >
                            {showTransactionPassword ? <FaEyeSlash /> : <FaEye />}
                          </button>
                        </div>
                      </div>
                      <div>
                        <label className="block text-sm text-gray-400 mb-1">নতুন লেনদেন পাসওয়ার্ড</label>
                        <div className="relative">
                          <input
                            type={showTransactionPassword ? "text" : "password"}
                            className="w-full p-2 border border-gray-600 rounded bg-gray-800 text-white text-sm"
                            value={newTransactionPassword}
                            onChange={(e) => setNewTransactionPassword(e.target.value)}
                            required
                            minLength={6}
                            placeholder="6+ characters"
                          />
                          <button
                            type="button"
                            className="absolute right-2 top-2 text-gray-500 hover:text-gray-300"
                            onClick={() => setShowTransactionPassword(!showTransactionPassword)}
                          >
                            {showTransactionPassword ? <FaEyeSlash /> : <FaEye />}
                          </button>
                        </div>
                      </div>
                      <div>
                        <label className="block text-sm text-gray-400 mb-1">পাসওয়ার্ড নিশ্চিত করুন</label>
                        <div className="relative">
                          <input
                            type={showTransactionPassword ? "text" : "password"}
                            className="w-full p-2 border border-gray-600 rounded bg-gray-800 text-white text-sm"
                            value={confirmTransactionPassword}
                            onChange={(e) => setConfirmTransactionPassword(e.target.value)}
                            required
                            minLength={6}
                            placeholder="Confirm password"
                          />
                          <button
                            type="button"
                            className="absolute right-2 top-2 text-gray-500 hover:text-gray-300"
                            onClick={() => setShowTransactionPassword(!showTransactionPassword)}
                          >
                            {showTransactionPassword ? <FaEyeSlash /> : <FaEye />}
                          </button>
                        </div>
                      </div>
                    </div>
                    <div className="flex justify-end">
                      <button
                        type="submit"
                        className="bg-cyan-500 hover:bg-cyan-600 text-gray-900 px-4 py-2 rounded text-sm font-medium flex items-center gap-2"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                        লেনদেন পাসওয়ার্ড পরিবর্তন করুন
                      </button>
                    </div>
                  </form>
                </div>
              )}
            </div>
          )}

          {selectedTab === 'ইতিহাস' && (
            <div>
              <h3 className="text-lg font-semibold mb-4 flex items-center text-white">
                <FaHistory className="mr-2 text-cyan-400" />
                লেনদেন ইতিহাস
              </h3>
              <div className="space-y-3">
                {betHistory.length > 0 ? (
                  betHistory.map((bet) => (
                    <div key={bet.id} className="bg-gray-800 p-3 rounded-lg border border-gray-700 hover:border-cyan-500 transition-colors">
                      <div className="flex justify-between items-center">
                        <div>
                          <p className="font-medium text-white">{bet.game}</p>
                          <p className="text-xs text-gray-400 mt-1">
                            {formatDateToBengali(bet.createdAt)}
                          </p>
                        </div>
                        <div className="text-right">
                          <p className={`font-bold ${
                            bet.result === 'win' ? 'text-green-400' : 'text-red-400'
                          }`}>
                            {bet.result === 'win' ? '+' : '-'}৳{bet.amount}
                          </p>
                          <p className="text-xs text-gray-400">অড: {bet.odds}</p>
                        </div>
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="text-center py-8 bg-gray-800 rounded-lg border border-gray-700">
                    <p className="text-gray-500">কোন লেনদেন ইতিহাস পাওয়া যায়নি</p>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Custom CSS for hiding scrollbar */}
      <style jsx>{`
        .hide-scrollbar {
          -ms-overflow-style: none;
          scrollbar-width: none;
        }
        .hide-scrollbar::-webkit-scrollbar {
          display: none;
        }
      `}</style>
    </div>
  );
};

export default Profile;